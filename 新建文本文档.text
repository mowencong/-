vue中小技巧
(1)自定义指令directives
关于自定义指令文档其实介绍的比较详细了，而且还举了一个非常详细的例子：
自定义指令其实就是Vue为我们提供直接操作dom的一些列方法，
虽然大部分开发时间都会面向数据，但说不准什么时候确实需要操作dom本身。
就我而言，自定义指令最大的用处就是可以引用一些第三方的代码插入到Vue项目中，比如有一个操作dom的函数：

function changeColor(dom){
	dom.style.backgroundColor = "red";
}

Vue.directives('color',{
	bind:function(el){
		changeColor(el)
	}
})

这样,如果需要这个dom改变颜色的话,只需眼这样即可:
<div v-color>改变颜色</div>
当日常开发遇到跟dom有关的问题却一筹莫展时,可以想想自定义指令是否有功能可以解决

vue骚操作之this.$options.data()
在vue单文件组件里有时需要重置data中的数据，比如表单填写一半，用户想重新填写。
<script>
	export default{
		data(){
			return {
				//表单
				form:{
					input:''
				}
			}
		},
		mothods:{
			reset(){
				this.form = this.$options.data().form;
			}
		}
	}
</script>
也可以通过给组件$data对象赋值来重置整个$data
this.$data = this.$options.data()
vue组件可以通过 this.$options 对象获取你编写的任何方法，比如 created( ) 生命周期函数

接收后台返回来的数据需要对0,1转换成中文的,我一般用map对数据重构,比如:
this.list.map((item)=>{
	if(item.a == 0){
		item.a = "不通过"
	}else if(item.a == 1){
		item.a = "通过"
	}
	return item
})
字符串转数组
var string = '11,222,333,444'
var str = string.split('');
数组转字符串
var str = [111,222,333]
var string = str.join('')
字符串转对象
const str = '{"id":0,"name":"张三","age":12}'
const strToObj = JSON.parse(str)
对象转字符串
const obj = {
     id: 0,
     name: '张三',
     age: 12
}
const objToStr = JSON.stringify(obj)

对象转成数组,通过循环push
let obj = {'未完成':5, '已完成':8, '待确认':4, '已取消':6};
var arr = []
for (let i in obj) {
    arr.push(obj[i]); //属性
    //arr.push(obj[i]); //值
}

vue之v-for循环普通数组，对象数组，对象，数字

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
    <script src="vue.js"></script>
</head>
<body>
    <!--容器-->
    <div id="app">
        <!--循环数组-->
       <span v-for="(u,i) in user">|||{{u}}--索引{{i}}|||</span>
        <!--循环对象数组--><br>
        <span v-for="(u,i) in object">---{{u.a}}---索引：{{i}}</span>
        <!--循环对象--><br>
        <span v-for="(val,key,i) in app">---值：{{val}}---键{{key}}----索引：{{i}}</span>
        <!--循环数字--><br>
        <span v-for="count in 10">{{count}}</span>
    </div>
 
<script>
    // 创建一个vue实例
    var vm=new Vue({
        el:'#app',  // 绑定id为appid容器
        data:{
            user:[1,2,3,4,5],
            object:[
                {"a":1},
                {"a":2},
                {"a":3}
            ],
            app:{
                "a":1,
                "b":2,
                "c":3
            }
        }
    })
</script>
</body>
</html>
 

字符串的遍历器接口：
for....of循环遍历字符串
例如
for(let i of 'foo'){
console.log(i)
}
// "f"
// "o"
// "o"

模板字符串中所有的空格和换行都是会被保留的，如果不想要这个换行，可以用trim方法消除它
例如：
$("#list").html(
`<ul>
	<li>first</li>
	<li>second</li>
</ul>
`.trim()

字符串模板不仅可以嵌入变量，还可以调用函数，还可以进行运算，以及引用对象属性，
嵌入变量的时候，需要将变量名写在${}之中
例如：
function authorize(user, action) {
  if (!user.hasPrivilege(action)) {
    throw new Error(
      // 传统写法为
      // 'User '
      // + user.name
      // + ' is not authorized to do '
      // + action
      // + '.'
      `User ${user.name} is not authorized to do ${action}.`);
  }
}

大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。
例如：
let x =1
let y =2
`${x}+${y} = ${x+y}`
//"1+2=3"
`${x}+${y*2} = ${x+y*2}`
//"1+4=5"
let obj = {x:1,y:2};
`${obj.x+obj.y}`
//"3"
``
)


模板字符串之中还能调用函数。
function fn() {
  return "Hello World";
}

`foo ${fn()} bar`
// foo Hello World bar


如果需要引用模板字符串本身，在需要时执行，可以写成函数

let func = (name) => `Hello ${name}!`;
func('Jack') // "Hello Jack!"

实例方法：includes(), startsWith(), endsWith()：

includes()：返回布尔值，表示是否找到了参数字符串。
startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
‘
实例方法：repeat()：

repeat方法返回一个新字符串，表示将原字符串重复n次。
参数如果是小数，会被取整。
如果repeat的参数是负数或者infinity,会报错
但是如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0
参数NaN等同于0
如果repeat的参数是字符串，则会先转成数字

实例方法：padStart()，padEnd()：

padStart()用于头部补全，padEnd()用于尾部补全。


'x'.padStart(5, 'ab') // 'ababx'
'x'.padStart(4, 'ab') // 'abax'

'x'.padEnd(5, 'ab') // 'xabab'
'x'.padEnd(4, 'ab') // 'xaba'


上面代码中，padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。
如果省略第二个参数，默认使用空格补全长度。
如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。
另一个用途是提示字符串格式。


实例方法：trimStart()，trimEnd()：

ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们的行为与trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。
